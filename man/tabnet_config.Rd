% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model.R
\name{tabnet_config}
\alias{tabnet_config}
\title{Configuration for TabNet models}
\usage{
tabnet_config(
  batch_size = 256,
  penalty = 0.001,
  clip_value = 1,
  loss = "auto",
  epochs = 5,
  drop_last = FALSE,
  n_d = 8,
  n_a = 8,
  n_steps = 3,
  gamma = 1.3,
  virtual_batch_size = 128,
  valid_split = 0,
  learn_rate = 0.02,
  optimizer = "adam",
  lr_scheduler = NULL,
  lr_decay = 0.1,
  step_size = 30,
  verbose = FALSE
)
}
\arguments{
\item{batch_size}{(int) Number of examples per batch, large batch sizes are
recommended. (default: 1024)}

\item{penalty}{This is the extra sparsity loss coefficient as proposed
in the original paper. The bigger this coefficient is, the sparser your model
will be in terms of feature selection. Depending on the difficulty of your
problem, reducing this value could help.}

\item{clip_value}{If a float is given this will clip the gradient at
clip_value. Pass \code{NULL} to not clip.}

\item{loss}{(character or function) Loss function for training (default to mse
for regression and cross entropy for classification)}

\item{epochs}{(int) Number of training epochs.}

\item{drop_last}{(bool) Whether to drop last batch if not complete during
training}

\item{n_d}{(int) Width of the decision prediction layer. Bigger values gives
more capacity to the model with the risk of overfitting. Values typically
range from 8 to 64.}

\item{n_a}{(int) Width of the attention embedding for each mask. According to
the paper n_d=n_a is usually a good choice. (default=8)}

\item{n_steps}{(int) Number of steps in the architecture
(usually between 3 and 10)}

\item{gamma}{(float) This is the coefficient for feature reusage in the masks.
A value close to 1 will make mask selection least correlated between layers.
Values range from 1.0 to 2.0.}

\item{virtual_batch_size}{(int) Size of the mini batches used for
"Ghost Batch Normalization" (default=128)}

\item{valid_split}{(float) The fraction of the dataset used for validation.}

\item{learn_rate}{initial learning rate for the optimizer.}

\item{optimizer}{the optimization method. currently only 'adam' is supported,
you can also pass any torch optimizer function.}

\item{lr_scheduler}{if \code{NULL}, no learning rate decay is used. if "step"
decays the learning rate by \code{lr_decay} every \code{step_size} epochs. It can
also be a \link[torch:lr_scheduler]{torch::lr_scheduler} function that only takes the optimizer
as parameter. The \code{step} method is called once per epoch.}

\item{lr_decay}{multiplies the initial learning rate by \code{lr_decay} every
\code{step_size} epochs. Unused if \code{lr_scheduler} is a \code{torch::lr_scheduler}
or \code{NULL}.}

\item{step_size}{the learning rate scheduler step size. Unused if
\code{lr_scheduler} is a \code{torch::lr_scheduler} or \code{NULL}.}

\item{verbose}{(bool) wether to print progress and loss values during
training.}
}
\description{
Configuration for TabNet models
}
